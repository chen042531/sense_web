{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Overview"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"android_install/","text":"HTTPS OkHttp attempts to balance two competing concerns: Connectivity to as many hosts as possible. That includes advanced hosts that run the latest versions of boringssl and less out of date hosts running older versions of OpenSSL . Security of the connection. This includes verification of the remote webserver with certificates and the privacy of data exchanged with strong ciphers. When negotiating a connection to an HTTPS server, OkHttp needs to know which TLS versions and cipher suites to offer. A client that wants to maximize connectivity would include obsolete TLS versions and weak-by-design cipher suites. A strict client that wants to maximize security would be limited to only the latest TLS version and strongest cipher suites. Specific security vs. connectivity decisions are implemented by ConnectionSpec . OkHttp includes four built-in connection specs: RESTRICTED_TLS is a secure configuration, intended to meet stricter compliance requirements. MODERN_TLS is a secure configuration that connects to modern HTTPS servers. COMPATIBLE_TLS is a secure configuration that connects to secure\u2013but not current\u2013HTTPS servers. CLEARTEXT is an insecure configuration that is used for http:// URLs. These loosely follow the model set in Google Cloud Policies . We track changes to this policy. By default, OkHttp will attempt a MODERN_TLS connection. However by configuring the client connectionSpecs you can allow a fall back to COMPATIBLE_TLS connection if the modern configuration fails. OkHttpClient client = new OkHttpClient . Builder () . connectionSpecs ( Arrays . asList ( ConnectionSpec . MODERN_TLS , ConnectionSpec . COMPATIBLE_TLS )) . build (); The TLS versions and cipher suites in each spec can change with each release. For example, in OkHttp 2.2 we dropped support for SSL 3.0 in response to the POODLE attack. And in OkHttp 2.3 we dropped support for RC4 . As with your desktop web browser, staying up-to-date with OkHttp is the best way to stay secure. You can build your own connection spec with a custom set of TLS versions and cipher suites. For example, this configuration is limited to three highly-regarded cipher suites. Its drawback is that it requires Android 5.0+ and a similarly current webserver. ConnectionSpec spec = new ConnectionSpec . Builder ( ConnectionSpec . MODERN_TLS ) . tlsVersions ( TlsVersion . TLS_1_2 ) . cipherSuites ( CipherSuite . TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 , CipherSuite . TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 , CipherSuite . TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 ) . build (); OkHttpClient client = new OkHttpClient . Builder () . connectionSpecs ( Collections . singletonList ( spec )) . build (); Debugging TLS Handshake Failures The TLS handshake requires clients and servers to share a common TLS version and cipher suite. This depends on the JVM or Android version, OkHttp version, and web server configuration. If there is no common cipher suite and TLS version, your call will fail like this: Caused by: javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0x7f2719a89e80: Failure in SSL library, usually a protocol error error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:770 0x7f2728a53ea0:0x00000000) at com.android.org.conscrypt.NativeCrypto.SSL_do_handshake(Native Method) You can check a web server\u2019s configuration using Qualys SSL Labs . OkHttp\u2019s TLS configuration history is tracked here . Applications expected to be installed on older Android devices should consider adopting the Google Play Services\u2019 ProviderInstaller . This will increase security for users and increase connectivity with web servers. Certificate Pinning ( .kt , .java ) By default, OkHttp trusts the certificate authorities of the host platform. This strategy maximizes connectivity, but it is subject to certificate authority attacks such as the 2011 DigiNotar attack . It also assumes your HTTPS servers\u2019 certificates are signed by a certificate authority. Use CertificatePinner to restrict which certificates and certificate authorities are trusted. Certificate pinning increases security, but limits your server team\u2019s abilities to update their TLS certificates. Do not use certificate pinning without the blessing of your server\u2019s TLS administrator! private val client = OkHttpClient . Builder () . certificatePinner ( CertificatePinner . Builder () . add ( \"publicobject.com\" , \"sha256/afwiKY3RxoMmLkuRW1l7QsPZTJPwDS2pdDROQjXw8ig=\" ) . build ()) . build () fun run () { val request = Request . Builder () . url ( \"https://publicobject.com/robots.txt\" ) . build () client . newCall ( request ). execute (). use { response -> if (! response . isSuccessful ) throw IOException ( \"Unexpected code $response\" ) for ( certificate in response . handshake !! . peerCertificates ) { println ( CertificatePinner . pin ( certificate )) } } } ```Java tab= private final OkHttpClient client = new OkHttpClient.Builder() .certificatePinner( new CertificatePinner.Builder() .add(\u201cpublicobject.com\u201d, \u201csha256/afwiKY3RxoMmLkuRW1l7QsPZTJPwDS2pdDROQjXw8ig=\u201d) .build()) .build(); public void run() throws Exception { Request request = new Request.Builder() .url(\u201chttps://publicobject.com/robots.txt\u201d) .build(); try ( Response response = client . newCall ( request ). execute ()) { if ( ! response . isSuccessful ()) throw new IOException ( \"Unexpected code \" + response ); for ( Certificate certificate : response . handshake (). peerCertificates ()) { System . out . println ( CertificatePinner . pin ( certificate )); } } } ### Customizing Trusted Certificates ([.kt][CustomTrustKotlin], [.java][CustomTrustJava]) The full code sample shows how to replace the host platform\u2019s certificate authorities with your own set. As above, **do not use custom certificates without the blessing of your server\u2019s TLS administrator!** ```Kotlin tab= private val client: OkHttpClient init { val trustManager = trustManagerForCertificates(trustedCertificatesInputStream()) val sslContext = SSLContext.getInstance(\"TLS\") sslContext.init(null, arrayOf <TrustManager> (trustManager), null) val sslSocketFactory = sslContext.socketFactory client = OkHttpClient.Builder() .sslSocketFactory(sslSocketFactory, trustManager) .build() } fun run() { val request = Request.Builder() .url(\"https://publicobject.com/helloworld.txt\") .build() client.newCall(request).execute().use { response -> if (!response.isSuccessful) throw IOException(\"Unexpected code $response\") for ((name, value) in response.headers) { println(\"$name: $value\") } println(response.body!!.string()) } } /** * Returns an input stream containing one or more certificate PEM files. This implementation just * embeds the PEM files in Java strings; most applications will instead read this from a resource * file that gets bundled with the application. */ private fun trustedCertificatesInputStream(): InputStream { ... // Full source omitted. See sample. } private fun trustManagerForCertificates(inputStream: InputStream): X509TrustManager { ... // Full source omitted. See sample. } ```Java tab= private final OkHttpClient client; public CustomTrust() { X509TrustManager trustManager; SSLSocketFactory sslSocketFactory; try { trustManager = trustManagerForCertificates(trustedCertificatesInputStream()); SSLContext sslContext = SSLContext.getInstance(\u201cTLS\u201d); sslContext.init(null, new TrustManager[] { trustManager }, null); sslSocketFactory = sslContext.getSocketFactory(); } catch (GeneralSecurityException e) { throw new RuntimeException(e); } client = new OkHttpClient.Builder() .sslSocketFactory(sslSocketFactory, trustManager) .build(); } public void run() throws Exception { Request request = new Request.Builder() .url(\u201chttps://publicobject.com/helloworld.txt\u201d) .build(); Response response = client.newCall(request).execute(); System.out.println(response.body().string()); } private InputStream trustedCertificatesInputStream() { \u2026 // Full source omitted. See sample. } public SSLContext sslContextForTrustedCertificates(InputStream in) { \u2026 // Full source omitted. See sample. } ```","title":"Install"},{"location":"android_install/#https","text":"OkHttp attempts to balance two competing concerns: Connectivity to as many hosts as possible. That includes advanced hosts that run the latest versions of boringssl and less out of date hosts running older versions of OpenSSL . Security of the connection. This includes verification of the remote webserver with certificates and the privacy of data exchanged with strong ciphers. When negotiating a connection to an HTTPS server, OkHttp needs to know which TLS versions and cipher suites to offer. A client that wants to maximize connectivity would include obsolete TLS versions and weak-by-design cipher suites. A strict client that wants to maximize security would be limited to only the latest TLS version and strongest cipher suites. Specific security vs. connectivity decisions are implemented by ConnectionSpec . OkHttp includes four built-in connection specs: RESTRICTED_TLS is a secure configuration, intended to meet stricter compliance requirements. MODERN_TLS is a secure configuration that connects to modern HTTPS servers. COMPATIBLE_TLS is a secure configuration that connects to secure\u2013but not current\u2013HTTPS servers. CLEARTEXT is an insecure configuration that is used for http:// URLs. These loosely follow the model set in Google Cloud Policies . We track changes to this policy. By default, OkHttp will attempt a MODERN_TLS connection. However by configuring the client connectionSpecs you can allow a fall back to COMPATIBLE_TLS connection if the modern configuration fails. OkHttpClient client = new OkHttpClient . Builder () . connectionSpecs ( Arrays . asList ( ConnectionSpec . MODERN_TLS , ConnectionSpec . COMPATIBLE_TLS )) . build (); The TLS versions and cipher suites in each spec can change with each release. For example, in OkHttp 2.2 we dropped support for SSL 3.0 in response to the POODLE attack. And in OkHttp 2.3 we dropped support for RC4 . As with your desktop web browser, staying up-to-date with OkHttp is the best way to stay secure. You can build your own connection spec with a custom set of TLS versions and cipher suites. For example, this configuration is limited to three highly-regarded cipher suites. Its drawback is that it requires Android 5.0+ and a similarly current webserver. ConnectionSpec spec = new ConnectionSpec . Builder ( ConnectionSpec . MODERN_TLS ) . tlsVersions ( TlsVersion . TLS_1_2 ) . cipherSuites ( CipherSuite . TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 , CipherSuite . TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 , CipherSuite . TLS_DHE_RSA_WITH_AES_128_GCM_SHA256 ) . build (); OkHttpClient client = new OkHttpClient . Builder () . connectionSpecs ( Collections . singletonList ( spec )) . build ();","title":"HTTPS"},{"location":"android_install/#debugging-tls-handshake-failures","text":"The TLS handshake requires clients and servers to share a common TLS version and cipher suite. This depends on the JVM or Android version, OkHttp version, and web server configuration. If there is no common cipher suite and TLS version, your call will fail like this: Caused by: javax.net.ssl.SSLProtocolException: SSL handshake aborted: ssl=0x7f2719a89e80: Failure in SSL library, usually a protocol error error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure (external/openssl/ssl/s23_clnt.c:770 0x7f2728a53ea0:0x00000000) at com.android.org.conscrypt.NativeCrypto.SSL_do_handshake(Native Method) You can check a web server\u2019s configuration using Qualys SSL Labs . OkHttp\u2019s TLS configuration history is tracked here . Applications expected to be installed on older Android devices should consider adopting the Google Play Services\u2019 ProviderInstaller . This will increase security for users and increase connectivity with web servers.","title":"Debugging TLS Handshake Failures"},{"location":"android_install/#certificate-pinning-kt-java","text":"By default, OkHttp trusts the certificate authorities of the host platform. This strategy maximizes connectivity, but it is subject to certificate authority attacks such as the 2011 DigiNotar attack . It also assumes your HTTPS servers\u2019 certificates are signed by a certificate authority. Use CertificatePinner to restrict which certificates and certificate authorities are trusted. Certificate pinning increases security, but limits your server team\u2019s abilities to update their TLS certificates. Do not use certificate pinning without the blessing of your server\u2019s TLS administrator! private val client = OkHttpClient . Builder () . certificatePinner ( CertificatePinner . Builder () . add ( \"publicobject.com\" , \"sha256/afwiKY3RxoMmLkuRW1l7QsPZTJPwDS2pdDROQjXw8ig=\" ) . build ()) . build () fun run () { val request = Request . Builder () . url ( \"https://publicobject.com/robots.txt\" ) . build () client . newCall ( request ). execute (). use { response -> if (! response . isSuccessful ) throw IOException ( \"Unexpected code $response\" ) for ( certificate in response . handshake !! . peerCertificates ) { println ( CertificatePinner . pin ( certificate )) } } } ```Java tab= private final OkHttpClient client = new OkHttpClient.Builder() .certificatePinner( new CertificatePinner.Builder() .add(\u201cpublicobject.com\u201d, \u201csha256/afwiKY3RxoMmLkuRW1l7QsPZTJPwDS2pdDROQjXw8ig=\u201d) .build()) .build(); public void run() throws Exception { Request request = new Request.Builder() .url(\u201chttps://publicobject.com/robots.txt\u201d) .build(); try ( Response response = client . newCall ( request ). execute ()) { if ( ! response . isSuccessful ()) throw new IOException ( \"Unexpected code \" + response ); for ( Certificate certificate : response . handshake (). peerCertificates ()) { System . out . println ( CertificatePinner . pin ( certificate )); } } } ### Customizing Trusted Certificates ([.kt][CustomTrustKotlin], [.java][CustomTrustJava]) The full code sample shows how to replace the host platform\u2019s certificate authorities with your own set. As above, **do not use custom certificates without the blessing of your server\u2019s TLS administrator!** ```Kotlin tab= private val client: OkHttpClient init { val trustManager = trustManagerForCertificates(trustedCertificatesInputStream()) val sslContext = SSLContext.getInstance(\"TLS\") sslContext.init(null, arrayOf <TrustManager> (trustManager), null) val sslSocketFactory = sslContext.socketFactory client = OkHttpClient.Builder() .sslSocketFactory(sslSocketFactory, trustManager) .build() } fun run() { val request = Request.Builder() .url(\"https://publicobject.com/helloworld.txt\") .build() client.newCall(request).execute().use { response -> if (!response.isSuccessful) throw IOException(\"Unexpected code $response\") for ((name, value) in response.headers) { println(\"$name: $value\") } println(response.body!!.string()) } } /** * Returns an input stream containing one or more certificate PEM files. This implementation just * embeds the PEM files in Java strings; most applications will instead read this from a resource * file that gets bundled with the application. */ private fun trustedCertificatesInputStream(): InputStream { ... // Full source omitted. See sample. } private fun trustManagerForCertificates(inputStream: InputStream): X509TrustManager { ... // Full source omitted. See sample. } ```Java tab= private final OkHttpClient client; public CustomTrust() { X509TrustManager trustManager; SSLSocketFactory sslSocketFactory; try { trustManager = trustManagerForCertificates(trustedCertificatesInputStream()); SSLContext sslContext = SSLContext.getInstance(\u201cTLS\u201d); sslContext.init(null, new TrustManager[] { trustManager }, null); sslSocketFactory = sslContext.getSocketFactory(); } catch (GeneralSecurityException e) { throw new RuntimeException(e); } client = new OkHttpClient.Builder() .sslSocketFactory(sslSocketFactory, trustManager) .build(); } public void run() throws Exception { Request request = new Request.Builder() .url(\u201chttps://publicobject.com/helloworld.txt\u201d) .build(); Response response = client.newCall(request).execute(); System.out.println(response.body().string()); } private InputStream trustedCertificatesInputStream() { \u2026 // Full source omitted. See sample. } public SSLContext sslContextForTrustedCertificates(InputStream in) { \u2026 // Full source omitted. See sample. } ```","title":"Certificate Pinning (.kt, .java)"},{"location":"support/","text":"\u200b Security Providers ================== \u200b Provider Status \u200b | Provider | HTTP/2 | TLSv1.3 | Powered By | Notes | | :--------------- | :------ | :----------- | :-------------- | :----------------------------------------------------------- | | JVM default | Java 9+ | Java 11+ | OpenJDK | | | Android default | \u2705 | Android 10+ | BoringSSL | | | [Bouncy Castle] | \u2705 | | [Bouncy Castle] | [Tracking bug.][bug5698] | \u200b All providers support HTTP/1.1 and TLSv1.2.","title":"Support"},{"location":"support/#provider-status","text":"\u200b | Provider | HTTP/2 | TLSv1.3 | Powered By | Notes | | :--------------- | :------ | :----------- | :-------------- | :----------------------------------------------------------- | | JVM default | Java 9+ | Java 11+ | OpenJDK | | | Android default | \u2705 | Android 10+ | BoringSSL | | | [Bouncy Castle] | \u2705 | | [Bouncy Castle] | [Tracking bug.][bug5698] | \u200b All providers support HTTP/1.1 and TLSv1.2.","title":"Provider Status"}]}